name: Publish

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}

jobs:
  get-semantic-version:
    if: ${{ github.repository_owner == 'shensven' }}
    runs-on: ubuntu-latest
    outputs:
      SEMANTIC_VERSION: ${{ steps.console-semantic-version.outputs.SEMANTIC_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Console semantic version
        id: console-semantic-version
        run: |
          SEMANTIC_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "SEMANTIC_VERSION=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT

  publish_android:
    name: Publish Android
    needs: get-semantic-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/android/*.gradle', '**/android/*.properties', '**/android/gradle/wrapper/gradle-wrapper.properties', '**/android/app/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore node_modules
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Genarate license compliance
        run: npx -y license-compliance --direct --report detailed --format json > ./src/screen/OpenSourceLibraries/licenseCompliance.json

      - name: Setting up Gradle variables
        run: |
          cd android
          echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}" >> gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}" >> gradle.properties

      - name: Restore jks
        run: |
          cd android/app
          echo -n "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > release.keystore

      - name: Release for Android & Play Store
        env:
          VERSION_CODE: ${{ github.run_number }}
          VERSION_NAME: ${{ needs.get-semantic-version.outputs.SEMANTIC_VERSION }}
        run: |
          cd android && chmod +x gradlew
          ./gradlew assembleRelease
          ./gradlew bundleRelease

      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: v${{ needs.get-semantic-version.outputs.SEMANTIC_VERSION }}
          tag: v${{ needs.get-semantic-version.outputs.SEMANTIC_VERSION }}
          allowUpdates: true
          draft: true
          artifacts: 'android/app/build/outputs/apk/release/*.*'

      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: App Store Backup
          tag: app-store-backup
          allowUpdates: true
          draft: true
          artifacts: 'android/app/build/outputs/bundle/release/*.aab'

  publish_ios:
    name: Publish iOS
    needs: get-semantic-version
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Restore CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/CocoaPods
            ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Restore DerivedData
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derivedData-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-derivedData-

      - name: Restore node_modules
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Restore profile
        env:
          P12_CERTIFICATE_BASE64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          P12_CERTIFICATE_PATH=${{ runner.temp }}/certificate.p12
          PROVISIONING_PROFILE_PATH=${{ runner.temp }}/pp.mobileprovision
          KEYCHAIN_PATH=${{ runner.temp }}/app_signing.keychain-db

          echo -n "$P12_CERTIFICATE_BASE64" | base64 --decode --output $P12_CERTIFICATE_PATH
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PROVISIONING_PROFILE_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/pp.mobileprovision

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 3600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $P12_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          cd ios && pod install --repo-update

      - name: Genarate license compliance
        run: yarn lcGen

      - name: Release for App Store & Upload to TestFlight
        env:
          NO_FLIPPER: '1'
        run: |
          cd ios
          xcrun agvtool new-marketing-version ${{ needs.get-semantic-version.outputs.SEMANTIC_VERSION }}
          xcrun agvtool new-version -all ${{ github.run_number }}

          xcodebuild archive \
            -workspace readhub_rn.xcworkspace \
            -scheme readhub_rn \
            -configuration Release \
            -archivePath ${{ runner.temp }}/readhub_rn.xcarchive \
            -allowProvisioningUpdates \
            -quiet \
            PROVISIONING_PROFILE_SPECIFIER="Readhub Distribution" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="iPhone Distribution"

          xcodebuild  -exportArchive \
            -archivePath ${{ runner.temp }}/readhub_rn.xcarchive \
            -exportPath ${{ runner.temp }} \
            -exportOptionsPlist readhub_rn/ExportOptions.plist
            -allowProvisioningUpdates \
            -quiet \
            | xcpretty

          xcrun altool --upload-app \
            --type ios \
            --file "${{ runner.temp }}/Readhub.ipa" \
            --username "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_ID_PASS }}" \

      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: App Store Backup
          tag: app-store-backup
          allowUpdates: true
          draft: true
          artifacts: '${{ runner.temp }}/*.ipa'
